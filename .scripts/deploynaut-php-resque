#!/bin/sh

### BEGIN INIT INFO
# Provides:          deploynaut-php-resque
# Required-Start:    $local_fs $remote_fs $syslog 
# Required-Stop:     $local_fs $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop the Deploynaut PHP Resque server
# Description:       PHP resque server for queued deploynaut jobs
### END INIT INFO

# Author: John Oppler <john@silverstripe.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
ROOT=/sites/deploynaut/www
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Deploynaut PHP resque"
NAME=deploynaut-php-resque
DAEMON=/usr/bin/php
DAEMON_ARGS="$ROOT/framework/cli-script.php dev/resque/run queue=* count=4"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USERNAME=www-data
LOGFILE=/var/log/$NAME
STATUSFILE=$ROOT/resque_status.sh

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --chuid $USERNAME --make-pidfile --pidfile $PIDFILE --background --exec $DAEMON --test > $LOGFILE 2>&1 \
		|| return 1
	start-stop-daemon --start --quiet --chuid $USERNAME --make-pidfile --pidfile $PIDFILE --background --exec $DAEMON -- \
		$DAEMON_ARGS > $LOGFILE 2>&1 \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	if [ -f "$STATUSFILE" ]
	then
		echo "Checking for running jobs."
		pre_stop_check
	else
		echo "No STATUSFILE found. Skipping pre-stop checks."
	fi

	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/5/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/5/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Does some checks before stopping to ensure no tasks are running.
# This will force a loop until no tasks are running.
#
pre_stop_check()
{
	# We need to ensure we have no pending or working tasks.
	bash $STATUSFILE | egrep "^(pending|working):\ [1-9]"

	# if egrep finds something it means a task is working or pending. In this it will
	# return a 0 exit code. If we get a 0 exit code, we need to prevent the service from stopping.
	if [ $? -eq 0 ]
	then
		echo "Jobs are running. Unable to stop service."
		echo "Sleeping for 10 seconds."
		sleep 10
		pre_stop_check
	fi
}


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
